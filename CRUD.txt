    CREATE

        # Create Database
            use Database_name
            (There is no command for create Database, it will create automatically when new collection created)

        # Create collection
            db.createCollection("collection_name")

        # Show collections 
            show collections

        # Delete collection
            db.getCollection("collection_name").drop()
            db.collection_name.drop()

        # Create document
            * Insert one document
                db.collection_name.insertOne(object)
                db.collection_name.insertMany([object1, object2, object3])
                db.collection_name.insert(object)


    AGGREGATION

        # Operators
            $match      $group      $project        $skip
            $sort       $count      $limit          $out

        # $group
            db.collection_name.aggregate([{$group: {_id: "$age"}}])
            db.collection_name.aggregate([{$group: {_id: "$name", {$sum: "$price"}}}])
            db.collection_name.aggregate([{$group: {_id:{age: "$age", place: "place"}}}])

        # $match
            aggregate([{$match: {age: {$gt: 24}}}])
            aggregate([{$match: {$and:[
                {gender: "female"},
                {age: {$gt: 30 }}
            ]}}]) 

        # match and group
            aggregate([
                {$match: {gender: "male"},
                {$group: {_id: {age: "$age", place: "$place"}}}
                }
            ])

        # count stage
             aggregate([
                {$count: "allDocumentsCount"}
             ])
        # Diffrent count methods
            Aggregate([]).toArray().length
            (convert to array and find its length)
            aggregate([]).itcount()
            find({}).count()

            aggregate([
                {$match: {}},
                {$group: {}},
                {$count: ""}
            ])

        # sort staging
            .aggregate([
                {$group: {_id: {"$age"}}},
                {$sort: {_id: 1}}
            ])
            (for ascending use 1 and 0 used to descending order)

            .aggregate([
                {$group: {_id:{age: "$age", place: "$place"}}},
                {$sort: {"_id.age": 1, "_id.place": -1}}
            ])

        